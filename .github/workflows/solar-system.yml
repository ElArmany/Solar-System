name: Solar System Workflow
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature-workflow

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    strategy:
      matrix:
        nodejs_version: [18,19,20]
        operating_system: [ubuntu-latest]
        exclude:
          - nodejs_version: 21
            operating_system: macos-latest

    runs-on: ${{ matrix.operating_system }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id: nodejs-unit-testing
        run: npm test

      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: mocha-test-result
          path: test-results.xml
    
  Code-coverage:
    name: Code-Coverage
    needs: unit-testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup NodeJs
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Check Code Coverage
        continue-on-error: true
        run: npx nyc --reporter cobertura --reporter lcov --reporter text --reporter json-summary mocha app-test.js --timeout 10000 --exit
      
      - name: Archive Test Results
        #if: steps.nodejs-unit-testing.steps.outcome == 'failure' || steps.nodejs-unit-testing.steps.outcome == 'success'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-result
          path: coverage
          retention-days: 5

  docker:
    name: Containerization
    needs: [Code-coverage, unit-testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Dockerhub login
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false                # 3aiz a build bs m3ml4 push dlw2ty
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}       # generate new key

      - name: Docker Image Test
        run: |
              docker images
              docker run --name solar-system-app -d -p 3000:3000 -e MONGO_URI=$MONGO_URI -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              export IP=$(docker inspect -f '{{range .NetworkSettings.Network}}{{.IPAddress}}{{end}}' solar-system-app)
              echo $IP
              docker inspect solar-system-app | grep -i IPAddress
              echo Testing Image URL using wget
              wget -q -O - 127.0.0.1:3000/live | grep live

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true            
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}       # generate new key

  deploy:
    runs-on: ubuntu-latest
    needs: [Code-coverage, unit-testing,docker]
    steps:
    - uses: actions/checkout@v2

    # Install Ansible
    - name: Install Ansible
      run: sudo apt-get update && sudo apt-get install -y ansible


    # Install amazon.aws Collection
    - name: Install Amazon AWS Ansible Collection
      run: |
        ansible-galaxy collection install amazon.aws

    - name: Set up Python 3
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    # Install boto3 and botocore (Required for AWS Dynamic Inventory)

    - name: Install Ansible and dependencies
      run: |
        sudo apt-get install python3-pip
        python3 -m pip install --upgrade pip
        python3 -m pip install boto3 botocore ansible

    
    # Set up AWS credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'
    
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ec2-34-238-150-98.compute-1.amazonaws.com >> ~/.ssh/known_hosts

    - name: Add SSH key to agent
      run: |
        eval $(ssh-agent -s)
        ssh-add ~/.ssh/id_rsa

    - name: Generate public key from private key
      run: ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub

    - name: Copy public key to EC2
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@ec2-34-238-150-98.compute-1.amazonaws.com "echo '$(cat ~/.ssh/id_rsa.pub)' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys"


    - name: Verify SSH User in Ansible Configuration
      run: |
        ansible-config dump | grep -i remote_user
      

    - name: Install Prometheus
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@ec2-34-238-150-98.compute-1.amazonaws.com << 'EOF'
        cat <<EOT >> prometheus.yml
        global:
          scrape_interval: 15s
        scrape_configs:
          - job_name: 'solar-system-app'
            static_configs:
              - targets: ['localhost:3000']
        EOT
        ./prometheus --config.file=prometheus.yml &
        EOF

    - name: Install Grafana
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@ec2-34-238-150-98.compute-1.amazonaws.com << 'EOF'
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        echo "deb https://packages.grafana.com/oss/release/deb stable main" | sudo tee /etc/apt/sources.list.d/grafana.list
        wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
        sudo apt-get update
        sudo apt-get install -y grafana
        sudo systemctl enable grafana-server
        sudo systemctl start grafana-server
        EOF
      

    # Run the Ansible playbook for deployment
    - name: Run Ansible Playbook to Deploy Application
      run: |
        ansible-playbook -i ./ansible/inventories/aws_ec2.yml ./ansible/playbook-deploy.yml -u ubuntu \
        --extra-vars "DOCKERHUB_USERNAME=${{ vars.DOCKERHUB_USERNAME }} GITHUB_SHA=${{ github.sha }}"" \
        -e "MONGO_URI=$MONGO_URI MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
        MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}"
      env:
        ANSIBLE_HOST_KEY_CHECKING: "False"

  Notify:
    runs-on: ubuntu-latest
    needs: [Code-coverage, unit-testing, docker, deploy]
    steps:
    - name: Set Job Status
      id: job_status
      run: echo "status=${{ job.status }}" >> $GITHUB_ENV

    - name: Notify on Success
      if: ${{ needs.Code-coverage.result == 'success' && needs.unit-testing.result == 'success' && needs.docker.result == 'success' && needs.deploy.result == 'success' }}  # Checks if all dependent jobs succeeded
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ env.status }}
        fields: repo,commit
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify on Failure
      if: ${{ needs.Code-coverage.result != 'success' || needs.unit-testing.result != 'success' || needs.docker.result != 'success' || needs.deploy.result != 'success' }}  # Checks if any dependent job failed
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ env.status }}
        fields: repo,commit
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

